-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\c :TEST_DBNAME :ROLE_SUPERUSER
--
-- Check that drop chunks with a unique constraint works as expected.
--
CREATE TABLE clients (
       id SERIAL PRIMARY KEY,
       name TEXT NOT NULL,
       UNIQUE(name)
);
CREATE TABLE records (
    time TIMESTAMPTZ NOT NULL,
    clientId INT NOT NULL REFERENCES clients(id),
    value DOUBLE PRECISION,
    UNIQUE(time, clientId)
);
SELECT * FROM create_hypertable('records', 'time',
       chunk_time_interval => INTERVAL '1h');
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
             1 | public      | records    | t
(1 row)

CREATE MATERIALIZED VIEW records_monthly
    WITH (timescaledb.continuous)
    AS
        SELECT time_bucket('1d', time) as bucket,
            clientId,
            avg(value) as value_avg,
            max(value)-min(value) as value_spread
        FROM records GROUP BY bucket, clientId WITH NO DATA;
INSERT INTO clients(name) VALUES ('test-client');
INSERT INTO records
SELECT generate_series('2000-03-01'::timestamptz,'2000-04-01','1 day'),1,3.14;
SELECT * FROM records_monthly;
            bucket            | clientid | value_avg | value_spread 
------------------------------+----------+-----------+--------------
 Mon Mar 27 16:00:00 2000 PST |        1 |      3.14 |            0
 Fri Mar 10 16:00:00 2000 PST |        1 |      3.14 |            0
 Tue Mar 07 16:00:00 2000 PST |        1 |      3.14 |            0
 Fri Mar 24 16:00:00 2000 PST |        1 |      3.14 |            0
 Sun Mar 19 16:00:00 2000 PST |        1 |      3.14 |            0
 Wed Mar 29 16:00:00 2000 PST |        1 |      3.14 |            0
 Wed Mar 15 16:00:00 2000 PST |        1 |      3.14 |            0
 Fri Mar 31 16:00:00 2000 PST |        1 |      3.14 |            0
 Mon Mar 20 16:00:00 2000 PST |        1 |      3.14 |            0
 Thu Mar 30 16:00:00 2000 PST |        1 |      3.14 |            0
 Sat Mar 11 16:00:00 2000 PST |        1 |      3.14 |            0
 Mon Mar 13 16:00:00 2000 PST |        1 |      3.14 |            0
 Sun Mar 12 16:00:00 2000 PST |        1 |      3.14 |            0
 Tue Mar 28 16:00:00 2000 PST |        1 |      3.14 |            0
 Sun Mar 26 16:00:00 2000 PST |        1 |      3.14 |            0
 Wed Mar 22 16:00:00 2000 PST |        1 |      3.14 |            0
 Thu Mar 16 16:00:00 2000 PST |        1 |      3.14 |            0
 Sat Mar 25 16:00:00 2000 PST |        1 |      3.14 |            0
 Thu Mar 23 16:00:00 2000 PST |        1 |      3.14 |            0
 Thu Mar 02 16:00:00 2000 PST |        1 |      3.14 |            0
 Sat Mar 18 16:00:00 2000 PST |        1 |      3.14 |            0
 Mon Mar 06 16:00:00 2000 PST |        1 |      3.14 |            0
 Tue Feb 29 16:00:00 2000 PST |        1 |      3.14 |            0
 Fri Mar 17 16:00:00 2000 PST |        1 |      3.14 |            0
 Tue Mar 14 16:00:00 2000 PST |        1 |      3.14 |            0
 Wed Mar 08 16:00:00 2000 PST |        1 |      3.14 |            0
 Sat Mar 04 16:00:00 2000 PST |        1 |      3.14 |            0
 Sun Mar 05 16:00:00 2000 PST |        1 |      3.14 |            0
 Tue Mar 21 16:00:00 2000 PST |        1 |      3.14 |            0
 Wed Mar 01 16:00:00 2000 PST |        1 |      3.14 |            0
 Thu Mar 09 16:00:00 2000 PST |        1 |      3.14 |            0
 Fri Mar 03 16:00:00 2000 PST |        1 |      3.14 |            0
(32 rows)

SELECT chunk_name, range_start, range_end
FROM timescaledb_information.chunks
WHERE hypertable_name = 'records_monthly' ORDER BY range_start;
 chunk_name | range_start | range_end 
------------+-------------+-----------
(0 rows)

SELECT chunk_name, range_start, range_end
FROM timescaledb_information.chunks
WHERE hypertable_name = 'records' ORDER BY range_start;
    chunk_name     |         range_start          |          range_end           
-------------------+------------------------------+------------------------------
 _hyper_1_1_chunk  | Wed Mar 01 00:00:00 2000 PST | Wed Mar 01 01:00:00 2000 PST
 _hyper_1_2_chunk  | Thu Mar 02 00:00:00 2000 PST | Thu Mar 02 01:00:00 2000 PST
 _hyper_1_3_chunk  | Fri Mar 03 00:00:00 2000 PST | Fri Mar 03 01:00:00 2000 PST
 _hyper_1_4_chunk  | Sat Mar 04 00:00:00 2000 PST | Sat Mar 04 01:00:00 2000 PST
 _hyper_1_5_chunk  | Sun Mar 05 00:00:00 2000 PST | Sun Mar 05 01:00:00 2000 PST
 _hyper_1_6_chunk  | Mon Mar 06 00:00:00 2000 PST | Mon Mar 06 01:00:00 2000 PST
 _hyper_1_7_chunk  | Tue Mar 07 00:00:00 2000 PST | Tue Mar 07 01:00:00 2000 PST
 _hyper_1_8_chunk  | Wed Mar 08 00:00:00 2000 PST | Wed Mar 08 01:00:00 2000 PST
 _hyper_1_9_chunk  | Thu Mar 09 00:00:00 2000 PST | Thu Mar 09 01:00:00 2000 PST
 _hyper_1_10_chunk | Fri Mar 10 00:00:00 2000 PST | Fri Mar 10 01:00:00 2000 PST
 _hyper_1_11_chunk | Sat Mar 11 00:00:00 2000 PST | Sat Mar 11 01:00:00 2000 PST
 _hyper_1_12_chunk | Sun Mar 12 00:00:00 2000 PST | Sun Mar 12 01:00:00 2000 PST
 _hyper_1_13_chunk | Mon Mar 13 00:00:00 2000 PST | Mon Mar 13 01:00:00 2000 PST
 _hyper_1_14_chunk | Tue Mar 14 00:00:00 2000 PST | Tue Mar 14 01:00:00 2000 PST
 _hyper_1_15_chunk | Wed Mar 15 00:00:00 2000 PST | Wed Mar 15 01:00:00 2000 PST
 _hyper_1_16_chunk | Thu Mar 16 00:00:00 2000 PST | Thu Mar 16 01:00:00 2000 PST
 _hyper_1_17_chunk | Fri Mar 17 00:00:00 2000 PST | Fri Mar 17 01:00:00 2000 PST
 _hyper_1_18_chunk | Sat Mar 18 00:00:00 2000 PST | Sat Mar 18 01:00:00 2000 PST
 _hyper_1_19_chunk | Sun Mar 19 00:00:00 2000 PST | Sun Mar 19 01:00:00 2000 PST
 _hyper_1_20_chunk | Mon Mar 20 00:00:00 2000 PST | Mon Mar 20 01:00:00 2000 PST
 _hyper_1_21_chunk | Tue Mar 21 00:00:00 2000 PST | Tue Mar 21 01:00:00 2000 PST
 _hyper_1_22_chunk | Wed Mar 22 00:00:00 2000 PST | Wed Mar 22 01:00:00 2000 PST
 _hyper_1_23_chunk | Thu Mar 23 00:00:00 2000 PST | Thu Mar 23 01:00:00 2000 PST
 _hyper_1_24_chunk | Fri Mar 24 00:00:00 2000 PST | Fri Mar 24 01:00:00 2000 PST
 _hyper_1_25_chunk | Sat Mar 25 00:00:00 2000 PST | Sat Mar 25 01:00:00 2000 PST
 _hyper_1_26_chunk | Sun Mar 26 00:00:00 2000 PST | Sun Mar 26 01:00:00 2000 PST
 _hyper_1_27_chunk | Mon Mar 27 00:00:00 2000 PST | Mon Mar 27 01:00:00 2000 PST
 _hyper_1_28_chunk | Tue Mar 28 00:00:00 2000 PST | Tue Mar 28 01:00:00 2000 PST
 _hyper_1_29_chunk | Wed Mar 29 00:00:00 2000 PST | Wed Mar 29 01:00:00 2000 PST
 _hyper_1_30_chunk | Thu Mar 30 00:00:00 2000 PST | Thu Mar 30 01:00:00 2000 PST
 _hyper_1_31_chunk | Fri Mar 31 00:00:00 2000 PST | Fri Mar 31 01:00:00 2000 PST
 _hyper_1_32_chunk | Sat Apr 01 00:00:00 2000 PST | Sat Apr 01 01:00:00 2000 PST
(32 rows)

CALL refresh_continuous_aggregate('records_monthly', NULL, NULL);
\set VERBOSITY default
SELECT drop_chunks('records', '2000-03-16'::timestamptz);
               drop_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
 _timescaledb_internal._hyper_1_2_chunk
 _timescaledb_internal._hyper_1_3_chunk
 _timescaledb_internal._hyper_1_4_chunk
 _timescaledb_internal._hyper_1_5_chunk
 _timescaledb_internal._hyper_1_6_chunk
 _timescaledb_internal._hyper_1_7_chunk
 _timescaledb_internal._hyper_1_8_chunk
 _timescaledb_internal._hyper_1_9_chunk
 _timescaledb_internal._hyper_1_10_chunk
 _timescaledb_internal._hyper_1_11_chunk
 _timescaledb_internal._hyper_1_12_chunk
 _timescaledb_internal._hyper_1_13_chunk
 _timescaledb_internal._hyper_1_14_chunk
 _timescaledb_internal._hyper_1_15_chunk
(15 rows)

\set VERBOSITY terse
DROP MATERIALIZED VIEW records_monthly;
NOTICE:  drop cascades to 32 other objects
DROP TABLE records;
DROP TABLE clients;
\set VERBOSITY default
-- Test that a continuous aggregate is refreshed correctly inside given chunk,
-- so it can be used together with user retention.
-- Shows that it is not affected by issue #2592.
CREATE OR REPLACE FUNCTION test_int_now() returns INT LANGUAGE SQL STABLE as 
    $$ SELECT 125 $$;
CREATE TABLE conditions(time_int INT NOT NULL, device INT, value FLOAT);
SELECT create_hypertable('conditions', 'time_int', chunk_time_interval => 10);
    create_hypertable    
-------------------------
 (3,public,conditions,t)
(1 row)

INSERT INTO conditions
SELECT time_val, time_val % 4, 3.14 FROM generate_series(0,100,1) AS time_val;
SELECT set_integer_now_func('conditions', 'test_int_now');
 set_integer_now_func 
----------------------
 
(1 row)

CREATE MATERIALIZED VIEW conditions_7
    WITH (timescaledb.continuous, timescaledb.materialized_only = TRUE)
    AS
        SELECT time_bucket(7, time_int) as bucket,
            SUM(value), COUNT(value)
        FROM conditions GROUP BY bucket WITH DATA;
NOTICE:  refreshing continuous aggregate "conditions_7"
HINT:  Use WITH NO DATA if you do not want to refresh the continuous aggregate on creation.
CREATE VIEW see_cagg AS SELECT * FROM conditions_7 WHERE bucket <= 70 ORDER BY bucket;
SELECT * FROM see_cagg;
 bucket |  sum  | count 
--------+-------+-------
      0 | 21.98 |     7
      7 | 21.98 |     7
     14 | 21.98 |     7
     21 | 21.98 |     7
     28 | 21.98 |     7
     35 | 21.98 |     7
     42 | 21.98 |     7
     49 | 21.98 |     7
     56 | 21.98 |     7
     63 | 21.98 |     7
     70 | 21.98 |     7
(11 rows)

-- This is the simplest case, when the updated bucket is inside a chunk, so it is expected
-- that the update is refreshed.
UPDATE conditions SET value = 4.00 WHERE time_int = 2;
-- This case updates values in the bucket, which affects two different partials in
-- two different chunks.
UPDATE conditions SET value = 4.00 WHERE time_int = 9;
UPDATE conditions SET value = 4.00 WHERE time_int = 11;
SELECT _timescaledb_internal.refresh_continuous_aggregate('conditions_7', show_chunks('conditions', 20));
 refresh_continuous_aggregate 
------------------------------
 
 
(2 rows)

SELECT drop_chunks('conditions', 20);
               drop_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_3_65_chunk
 _timescaledb_internal._hyper_3_66_chunk
(2 rows)

SELECT * FROM see_cagg;
 bucket |  sum  | count 
--------+-------+-------
      0 | 22.84 |     7
      7 |  23.7 |     7
     14 | 21.98 |     7
     21 | 21.98 |     7
     28 | 21.98 |     7
     35 | 21.98 |     7
     42 | 21.98 |     7
     49 | 21.98 |     7
     56 | 21.98 |     7
     63 | 21.98 |     7
     70 | 21.98 |     7
(11 rows)

-- This case is an update at the beginning of a bucket, which crosses two chunks. The update 
-- is in the first chunk, which is going to be refreshed, and the update will be present.
UPDATE conditions SET value = 4.00 WHERE time_int = 39;
-- This update is in the bucket, which crosses two chunks. The first chunk is going to be 
-- refreshed now and the update is outside it, and thus should not be reflected. The second 
-- chunk contains the update and will be refreshed on the next call, thus it should be reflected 
-- in the continuous aggregate only after another refresh.
UPDATE conditions SET value = 4.00 WHERE time_int = 41;
-- After the call to drop_chunks the update in 39 will be refreshed and present in the cagg, 
-- but not the update in 41.
BEGIN;
    SELECT _timescaledb_internal.refresh_continuous_aggregate('conditions_7', show_chunks('conditions', 40));
 refresh_continuous_aggregate 
------------------------------
 
 
(2 rows)

    SELECT drop_chunks('conditions', 40);
               drop_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_3_67_chunk
 _timescaledb_internal._hyper_3_68_chunk
(2 rows)

END;
SELECT * FROM see_cagg;
 bucket |  sum  | count 
--------+-------+-------
      0 | 22.84 |     7
      7 |  23.7 |     7
     14 | 21.98 |     7
     21 | 21.98 |     7
     28 | 21.98 |     7
     35 | 22.84 |     7
     42 | 21.98 |     7
     49 | 21.98 |     7
     56 | 21.98 |     7
     63 | 21.98 |     7
     70 | 21.98 |     7
(11 rows)

-- Now refresh includes the update in 41.
SELECT _timescaledb_internal.refresh_continuous_aggregate('conditions_7', show_chunks('conditions', 60));
 refresh_continuous_aggregate 
------------------------------
 
 
(2 rows)

SELECT drop_chunks('conditions', 60);
               drop_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_3_69_chunk
 _timescaledb_internal._hyper_3_70_chunk
(2 rows)

SELECT * FROM see_cagg;
 bucket |  sum  | count 
--------+-------+-------
      0 | 22.84 |     7
      7 |  23.7 |     7
     14 | 21.98 |     7
     21 | 21.98 |     7
     28 | 21.98 |     7
     35 |  23.7 |     7
     42 | 21.98 |     7
     49 | 21.98 |     7
     56 | 21.98 |     7
     63 | 21.98 |     7
     70 | 21.98 |     7
(11 rows)

-- Update chunks before drop but don't refresh, so the update will not be reflected in the cagg.
UPDATE conditions SET value = 4.00 WHERE time_int = 62;
UPDATE conditions SET value = 4.00 WHERE time_int = 69;
SELECT drop_chunks('conditions', 80);
               drop_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_3_71_chunk
 _timescaledb_internal._hyper_3_72_chunk
(2 rows)

SELECT * FROM see_cagg;
 bucket |  sum  | count 
--------+-------+-------
      0 | 22.84 |     7
      7 |  23.7 |     7
     14 | 21.98 |     7
     21 | 21.98 |     7
     28 | 21.98 |     7
     35 |  23.7 |     7
     42 | 21.98 |     7
     49 | 21.98 |     7
     56 | 21.98 |     7
     63 | 21.98 |     7
     70 | 21.98 |     7
(11 rows)

